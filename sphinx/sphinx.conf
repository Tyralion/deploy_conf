# /etc/init/sphinx.conf - Sphinx config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sphinx instances with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Sphinx instances at once.
#
# Save this config as /etc/init/sphinx.conf then manage sphinx with:
#   sudo start sphinx app=PATH_TO_APP
#   sudo stop sphinx app=PATH_TO_APP
#   sudo status sphinx app=PATH_TO_APP
#
# Hack Upstart's reload command to 'quiet' Sphinx:
#
#   sudo reload sphinx app=PATH_TO_APP
#
# or use the service command:
#   sudo service sphinx {start,stop,restart,status}
#

description "Sphinx Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping sphinx-manager or runlevel [06])

# change nobody to match your deployment user if you want to use this as a less privileged user (recommended!)
setuid nobody
setgid nobody

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sphinx. Without declaring these as
# normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal USR1

# Upstart waits 5 seconds by default to kill the a process. Increase timeout to
# give sphinx process enough time to exit.
kill timeout 15

instance ${app}

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv/rvm
# quoted heredoc to tell /bin/sh not to interpret
# variables

# source ENV variables manually as Upstart doesn't, eg:
#. /etc/environment

exec /bin/bash <<'EOT'
  # set HOME to the setuid user's home, there doesn't seem to be a better, portable way
  export HOME="$(eval echo ~$(id -un))"

  logger -t sphinx "Starting server: $app"

  exec /usr/bin/searchd -c $app/config/sphinx.conf --nodetach
EOT
end script
